// Good Code: Using Blocks for Asynchronous Operations

#import <Foundation/Foundation.h>

@interface MyObject : NSObject

- (void)performLongRunningTaskWithCompletion:(void (^)(BOOL success, NSError *error))completion;

@end

@implementation MyObject

- (void)performLongRunningTaskWithCompletion:(void (^)(BOOL success, NSError *error))completion {
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        // Simulate a long-running task
        sleep(2); 

        BOOL success = arc4random_uniform(2) == 0; // Random success/failure
        NSError *error = success ? nil : [NSError errorWithDomain:@"MyDomain" code:1 userInfo:nil];

        dispatch_async(dispatch_get_main_queue(), ^{
            completion(success, error);
        });
    });
}

@end

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        MyObject *obj = [[MyObject alloc] init];
        [obj performLongRunningTaskWithCompletion:^(BOOL success, NSError *error) {
            if (success) {
                NSLog(@"Task completed successfully!");
            } else {
                NSLog(@"Task failed: %@", error);
            }
        }];
        [[NSRunLoop currentRunLoop] run]; // Keep the program running to see the result
    }
    return 0;
}


// Bad Code: Improper Error Handling and Synchronous Operation

#import <Foundation/Foundation.h>

@interface MyObject : NSObject
- (BOOL)performLongRunningTask;
@end

@implementation MyObject
- (BOOL)performLongRunningTask {
    sleep(2); //Simulates long running task.  Blocking.
    return arc4random_uniform(2) == 0;
}
@end


int main(int argc, const char * argv[]) {
    @autoreleasepool {
      MyObject *obj = [[MyObject alloc] init];
      if ([obj performLongRunningTask]) {
          NSLog(@"Task completed successfully!");
      } else {
          NSLog(@"Task failed!"); //Minimal error handling
      }
    }
    return 0;
}
